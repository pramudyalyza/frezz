{"version":3,"sources":["components/AlertDismissable.js","pages/About.js","components/LoadButton.js","model/classes.js","config.js","pages/Classify.js","pages/NotFound.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["AlertDismissable","this","props","show","react_default","a","createElement","Alert","variant","onClose","dismissible","title","dangerouslySetInnerHTML","__html","message","Component","Home","className","LoadButton","_ref","isLoading","text","loadingText","_ref$className","_ref$disabled","disabled","Object","objectWithoutProperties","Button","assign","concat","Spinner","as","animation","size","role","aria-hidden","MODEL_CLASSES","0","1","2","3","4","5","src_config","API_ENDPOINT","MODEL_PATH","IMAGE_SIZE","CANVAS_SIZE","TOPK_PREDICTIONS","INDEXEDDB_KEY","Classify","_this","classCallCheck","_super","call","initWebcam","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","tf","webcam","refs","resizeWidth","resizeHeight","facingMode","sent","t0","noWebcam","style","display","stop","startWebcam","_callee2","_context2","start","stopWebcam","_callee3","_context3","getModelInfo","_callee5","_context5","fetch","config","method","then","_ref5","_callee4","response","_context4","json","data","modelLastUpdated","last_updated","catch","err","console","log","_x","apply","arguments","updateModel","_callee6","_context6","setState","isDownloadingModel","model","save","modelUpdateAvailable","showModelUpdateAlert","showModelUpdateSuccess","classifyLocalImage","_callee7","croppedCanvas","image","imageData","resizedImage","logits","probabilities","preds","context","ratioX","ratioY","ratio","_context7","isClassifying","cropper","getCroppedCanvas","fromPixels","toFloat","processImage","resizeBilinear","predict","getTopKClasses","predictions","photoSettingsOpen","state","canvas","getContext","width","height","Math","min","clearRect","drawImage","dispose","classifyWebcamImage","_callee8","imageCapture","resized","tensorData","_context8","capture","div","toPixels","_ref9","_callee9","_context9","abrupt","expandDims","sub","_x2","_ref10","_callee10","values","topK","valuesAndIndices","i","topkValues","topkIndices","_i","topClassesAndProbs","_i2","_context10","length","push","value","index","sort","b","Float32Array","Int32Array","probability","toFixed","_x3","_x4","handlePanelClick","event","handleFileChange","target","files","file","URL","createObjectURL","filename","name","handleTabSelect","activeKey","modelLoaded","isModelLoading","window","openDB","db","transaction","objectStore","get","item","dateSaved","Date","modelArtifactsInfo","getTime","warn","_context11","t1","_this2","e","_this3","react","Collapse","in","id","Container","modelType","onClick","Tabs","defaultActiveKey","onSelect","Tab","eventKey","ref","index_esm","color","Form","Group","controlId","Label","Control","onChange","type","accept","react_cropper_default","src","guides","aspectRatio","viewMode","ListGroup","map","category","pages_NotFound","href","Routes","childProps","react_router","path","exact","component","About","NotFound","App","dismissUpdateAlert","showUpdateAlert","reloadMsg","Navbar","collapseOnSelect","expand","Brand","react_router_dom","to","updateAvailable","paddingTop","components_AlertDismissable","withRouter","isLocalhost","Boolean","location","hostname","match","register","navigator","process","origin","addEventListener","swUrl","contentType","headers","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","newerSwAvailable","sw","onUpdate","waiting","active","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","error","Index","contentCached","handleUpdate","waitingServiceWorker","postMessage","src_App_0","ReactDOM","render","src_Index","document","getElementById"],"mappings":"4dAuBeA,yKAZX,OAAIC,KAAKC,MAAMC,KAEXC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,QAASP,KAAKC,MAAMM,SAAW,SAAUC,QAASR,KAAKC,MAAMO,QAASC,aAAW,GACpFT,KAAKC,MAAMS,OAASP,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,cAASL,KAAKC,MAAMS,QAC9CP,EAAAC,EAAAC,cAAA,OAAKM,wBAAyB,CAAEC,OAAQZ,KAAKC,MAAMY,YAIlD,YAXoBC,aCDVC,gLAEjB,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,mBACbb,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,+UAG+DF,EAAAC,EAAAC,cAAA,4BAH/D,uDAIEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WALF,2DAOEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,wCACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,iCACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,oCACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,kDAjBkBS,oJCDnBG,EAAA,SAAAC,GAAA,IACbC,EADaD,EACbC,UACAC,EAFaF,EAEbE,KACAC,EAHaH,EAGbG,YAHaC,EAAAJ,EAIbF,iBAJa,IAAAM,EAID,GAJCA,EAAAC,EAAAL,EAKbM,gBALa,IAAAD,KAMVtB,EANUwB,OAAAC,EAAA,EAAAD,CAAAP,EAAA,kEAQbf,EAAAC,EAAAC,cAACsB,EAAA,EAADF,OAAAG,OAAA,CACEZ,UAAS,cAAAa,OAAgBb,GACzBQ,SAAUA,GAAYL,GAClBlB,GAEHkB,GAAahB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACZC,GAAG,OACHC,UAAU,SACVC,KAAK,KACLC,KAAK,SACLC,cAAY,SACV,IACHhB,EAAYE,EAAcD,ICvBlBgB,EAAgB,CAC3BC,EAAG,cACHC,EAAG,eACHC,EAAG,eACHC,EAAG,eACHC,EAAG,gBACHC,EAAG,iBCTUC,EAAA,CACbC,aAAc,6BCcVC,eAAa,8CACbC,EAAa,IACbC,EAAc,IACdC,EAAmB,EAInBC,EAAgB,YAMDC,oDAEnB,SAAAA,EAAYjD,GAAO,IAAAkD,EAAA,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAAzB,KAAAkD,IACjBC,EAAAE,EAAAC,KAAAtD,KAAMC,IAmFRsD,WApFmB9B,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAArD,EAAAsD,KAoFN,SAAAC,IAAA,OAAAF,EAAArD,EAAAwD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEWC,IAAQC,OAC1Bd,EAAKe,KAAKD,OACV,CAACE,YAAapB,EAAaqB,aAAcrB,EAAasB,WAAY,gBAJ3D,OAETlB,EAAKc,OAFIJ,EAAAS,KAAAT,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAAU,GAAAV,EAAA,SAQTV,EAAKe,KAAKM,SAASC,MAAMC,QAAU,QAR1B,wBAAAb,EAAAc,SAAAhB,EAAA,iBApFMR,EAgGnByB,YAhGmBnD,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAArD,EAAAsD,KAgGL,SAAAmB,IAAA,OAAApB,EAAArD,EAAAwD,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OACRZ,EAAKc,QACPd,EAAKc,OAAOc,QAFF,wBAAAD,EAAAH,SAAAE,MAhGK1B,EAsGnB6B,WAtGmBvD,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAArD,EAAAsD,KAsGN,SAAAuB,IAAA,OAAAxB,EAAArD,EAAAwD,KAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,OACPZ,EAAKc,QACPd,EAAKc,OAAOU,OAFH,wBAAAO,EAAAP,SAAAM,MAtGM9B,EA4GnBgC,aA5GmB1D,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAArD,EAAAsD,KA4GJ,SAAA0B,IAAA,OAAA3B,EAAArD,EAAAwD,KAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,cAAAsB,EAAAtB,KAAA,EACPuB,MAAK,GAAAzD,OAAI0D,EAAO3C,aAAX,eAAsC,CAC/C4C,OAAQ,QAETC,KAHK,eAAAC,EAAAjE,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAArD,EAAAsD,KAGA,SAAAiC,EAAOC,GAAP,OAAAnC,EAAArD,EAAAwD,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,cAAA8B,EAAA9B,KAAA,EACE6B,EAASE,OAAOL,KAAK,SAACM,GAC1B5C,EAAK6C,iBAAmBD,EAAKE,eAE9BC,MAAM,SAACC,GACNC,QAAQC,IAAI,qCALV,wBAAAR,EAAAlB,SAAAgB,MAHA,gBAAAW,GAAA,OAAAZ,EAAAa,MAAAvG,KAAAwG,YAAA,IAWLN,MAAM,SAACC,GACNC,QAAQC,IAAI,8BAbD,wBAAAhB,EAAAV,SAAAS,MA5GIjC,EA6HnBsD,YA7HmBhF,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAArD,EAAAsD,KA6HL,SAAAgD,IAAA,OAAAjD,EAAArD,EAAAwD,KAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,cACZqC,QAAQC,IAAI,uBAAyBpD,GACrCE,EAAKyD,SAAS,CAAEC,oBAAoB,IAFxBF,EAAA5C,KAAA,EAGOC,IAAmBnB,GAH1B,cAGZM,EAAK2D,MAHOH,EAAArC,KAAAqC,EAAA5C,KAAA,EAINZ,EAAK2D,MAAMC,KAAK,eAAiB9D,GAJ3B,OAKZE,EAAKyD,SAAS,CACZC,oBAAoB,EACpBG,sBAAsB,EACtBC,sBAAsB,EACtBC,wBAAwB,IATd,wBAAAP,EAAAhC,SAAA+B,MA7HKvD,EA0InBgE,mBA1ImB1F,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAArD,EAAAsD,KA0IE,SAAA0D,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAtE,EAAArD,EAAAwD,KAAA,SAAAoE,GAAA,cAAAA,EAAAlE,KAAAkE,EAAAjE,MAAA,cACnBZ,EAAKyD,SAAS,CAAEqB,eAAe,IAEzBZ,EAAgBlE,EAAKe,KAAKgE,QAAQC,mBAClCb,EAAQtD,IAAS,kBAAMA,IAAWoE,WAAWf,GAAegB,YAJ/CL,EAAAjE,KAAA,EAMKZ,EAAKmF,aAAahB,GANvB,cAMbC,EANaS,EAAA1D,KAObkD,EAAexD,IAASuE,eAAehB,EAAW,CAACzE,EAAYA,IAE/D2E,EAAStE,EAAK2D,MAAM0B,QAAQhB,GATfQ,EAAAjE,KAAA,GAUS0D,EAAO1B,OAVhB,eAUb2B,EAVaM,EAAA1D,KAAA0D,EAAAjE,KAAA,GAWCZ,EAAKsF,eAAef,EAAe1E,GAXpC,QAWb2E,EAXaK,EAAA1D,KAanBnB,EAAKyD,SAAS,CACZ8B,YAAaf,EACbM,eAAe,EACfU,mBAAoBxF,EAAKyF,MAAMD,oBAG3Bf,EAAUzE,EAAKe,KAAK2E,OAAOC,WAAW,MACtCjB,EAAS9E,EAAcsE,EAAc0B,MACrCjB,EAAS/E,EAAcsE,EAAc2B,OACrCjB,EAAQkB,KAAKC,IAAIrB,EAAQC,GAC/BF,EAAQuB,UAAU,EAAG,EAAGpG,EAAaA,GACrC6E,EAAQwB,UAAU/B,EAAe,EAAG,EAClBA,EAAc0B,MAAQhB,EAAOV,EAAc2B,OAASjB,GAEtET,EAAM+B,UACN9B,EAAU8B,UACV7B,EAAa6B,UACb5B,EAAO4B,UA9BY,yBAAArB,EAAArD,SAAAyC,MA1IFjE,EA2KnBmG,oBA3KmB7H,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAArD,EAAAsD,KA2KG,SAAA6F,IAAA,IAAAC,EAAAC,EAAAlC,EAAAE,EAAAC,EAAAC,EAAA+B,EAAA,OAAAjG,EAAArD,EAAAwD,KAAA,SAAA+F,GAAA,cAAAA,EAAA7F,KAAA6F,EAAA5F,MAAA,cACpBZ,EAAKyD,SAAS,CAAEqB,eAAe,IADX0B,EAAA5F,KAAA,EAGOZ,EAAKc,OAAO2F,UAHnB,cAGdJ,EAHcG,EAAArF,KAKdmF,EAAUzF,IAASuE,eAAeiB,EAAc,CAAC1G,EAAYA,IAL/C6G,EAAA5F,KAAA,EAMIZ,EAAKmF,aAAamB,GANtB,cAMdlC,EANcoC,EAAArF,KAOdmD,EAAStE,EAAK2D,MAAM0B,QAAQjB,GAPdoC,EAAA5F,KAAA,GAQQ0D,EAAO1B,OARf,eAQd2B,EARciC,EAAArF,KAAAqF,EAAA5F,KAAA,GASAZ,EAAKsF,eAAef,EAAe1E,GATnC,eASd2E,EATcgC,EAAArF,KAWpBnB,EAAKyD,SAAS,CACZ8B,YAAaf,EACbM,eAAe,EACfU,mBAAoBxF,EAAKyF,MAAMD,oBAG3Be,EAAa1F,IAAQ,kBAAMwF,EAAanB,UAAUwB,IAAI,OAjBxCF,EAAA5F,KAAA,GAkBdC,IAAW8F,SAASJ,EAAYvG,EAAKe,KAAK2E,QAlB5B,QAoBpBY,EAAQJ,UACRG,EAAaH,UACb9B,EAAU8B,UACV5B,EAAO4B,UACPK,EAAWL,UAxBS,yBAAAM,EAAAhF,SAAA4E,MA3KHpG,EAsMnBmF,aAtMmB,eAAAyB,EAAAtI,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAArD,EAAAsD,KAsMJ,SAAAsG,EAAO1C,GAAP,OAAA7D,EAAArD,EAAAwD,KAAA,SAAAqG,GAAA,cAAAA,EAAAnG,KAAAmG,EAAAlG,MAAA,cAAAkG,EAAAC,OAAA,SACNlG,IAAQ,kBAAMsD,EAAM6C,WAAW,GAAG9B,UAAUwB,IAAI,KAAKO,IAAI,MADnD,wBAAAH,EAAAtF,SAAAqF,MAtMI,gBAAAK,GAAA,OAAAN,EAAAxD,MAAAvG,KAAAwG,YAAA,GAAArD,EA2MnBsF,eA3MmB,eAAA6B,EAAA7I,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAArD,EAAAsD,KA2MF,SAAA6G,EAAOC,EAAQC,GAAf,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAvH,EAAArD,EAAAwD,KAAA,SAAAqH,GAAA,cAAAA,EAAAnH,KAAAmH,EAAAlH,MAAA,OAEf,IADM2G,EAAmB,GAChBC,EAAI,EAAGA,EAAIH,EAAOU,OAAQP,IACjCD,EAAiBS,KAAK,CAACC,MAAOZ,EAAOG,GAAIU,MAAOV,IAOlD,IALAD,EAAiBY,KAAK,SAAClL,EAAGmL,GACxB,OAAOA,EAAEH,MAAQhL,EAAEgL,QAEfR,EAAa,IAAIY,aAAaf,GAC9BI,EAAc,IAAIY,WAAWhB,GAC1BE,EAAI,EAAGA,EAAIF,EAAME,IACxBC,EAAWD,GAAKD,EAAiBC,GAAGS,MACpCP,EAAYF,GAAKD,EAAiBC,GAAGU,MAIvC,IADMN,EAAqB,GAClBJ,EAAI,EAAGA,EAAI,EAAGA,IACrBI,EAAmBI,KAAK,CACtBnK,UAAWoB,EAAcyI,EAAYF,IACrCe,aAA8B,IAAhBd,EAAWD,IAAUgB,QAAQ,KAnBhC,OAAAV,EAAAf,OAAA,SAsBRa,GAtBQ,wBAAAE,EAAAtG,SAAA4F,MA3ME,gBAAAqB,EAAAC,GAAA,OAAAvB,EAAA/D,MAAAvG,KAAAwG,YAAA,GAAArD,EAoOnB2I,iBAAmB,SAAAC,GACjB5I,EAAKyD,SAAS,CAAE+B,mBAAoBxF,EAAKyF,MAAMD,qBArO9BxF,EAwOnB6I,iBAAmB,SAAAD,GACbA,EAAME,OAAOC,OAASH,EAAME,OAAOC,MAAMhB,OAAS,GACpD/H,EAAKyD,SAAS,CACZuF,KAAMC,IAAIC,gBAAgBN,EAAME,OAAOC,MAAM,IAC7CI,SAAUP,EAAME,OAAOC,MAAM,GAAGK,QA5OnBpJ,EAiPnBqJ,gBAAkB,SAAAC,GAChB,OAAOA,GACL,IAAK,SACHtJ,EAAKyB,cACL,MACF,IAAK,YACHzB,EAAKyD,SAAS,CAAC0F,SAAU,KAAMH,KAAM,OACrChJ,EAAK6B,eArPT7B,EAAKc,OAAS,KACdd,EAAK2D,MAAQ,KACb3D,EAAK6C,iBAAmB,KAExB7C,EAAKyF,MAAQ,CACX8D,aAAa,EACbJ,SAAU,GACVK,gBAAgB,EAChB1E,eAAe,EACfS,YAAa,GACbC,mBAAmB,EACnB3B,sBAAsB,EACtBC,sBAAsB,EACtBC,wBAAwB,EACxBL,oBAAoB,GAjBL1D,gMAsBZ,cAAeyJ,kDAEG5I,IAAmB,eAAiBf,iBAAvDjD,KAAK8G,+BAGc+F,YArCN,eAqC2B,iBAAhCC,mBACaA,EAAGC,YArCR,oBAsCQC,YAtCR,oBAuCQC,IAAIhK,kBAFpBiK,SAGAC,EAAY,IAAIC,KAAKF,EAAKG,mBAAmBF,qBAC7CnN,KAAKmF,uBACXiB,QAAQC,IAAIrG,KAAKgG,mBACZhG,KAAKgG,kBAAqBmH,GAAa,IAAIC,KAAKpN,KAAKgG,kBAAkBsH,UAC1ElH,QAAQC,IAAI,qBAGZrG,KAAK4G,SAAS,CACZI,sBAAsB,EACtBC,sBAAsB,sDAM1Bb,QAAQmH,KAARC,EAAAjJ,IACA6B,QAAQmH,KAAK,6GAMfnH,QAAQC,IAAI,iDACZD,QAAQC,IAARmH,EAAAC,cACmBzJ,IAAmBnB,kBAAtC7C,KAAK8G,uBACC9G,KAAK8G,MAAMC,KAAK,eAAiB9D,0CAKzCmD,QAAQmH,KAAK,sCACMvJ,IAAmBnB,WAAtC7C,KAAK8G,qBAGP9G,KAAK4G,SAAS,CAAE8F,aAAa,IAC7B1M,KAAKuD,aAEYS,IAAQ,kBAAM0J,EAAK5G,MAAM0B,QAAQxE,IAAS,CAAC,EAAGlB,EAAYA,EAAY,OAC5EuG,oRAIPrJ,KAAKiE,QACPjE,KAAKiE,OAAOU,OAGd,IACE3E,KAAK8G,MAAMuC,UAEb,MAAOsE,uIA8KA,IAAAC,EAAA5N,KACP,OACEG,EAAAC,EAAAC,cAAA,OAAKW,UAAU,uBAEZhB,KAAK4I,MAAM8D,aACZvM,EAAAC,EAAAC,cAACwN,EAAA,SAAD,KACE1N,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACE3B,EAAAC,EAAAC,cAAA,QAAMW,UAAU,+BAEjB,IAAIb,EAAAC,EAAAC,cAAA,QAAMW,UAAU,sBAAhB,iBACLb,EAAAC,EAAAC,cAAA,yFAIFL,KAAK4I,MAAM8D,aACXvM,EAAAC,EAAAC,cAACwN,EAAA,SAAD,KACE1N,EAAAC,EAAAC,cAACyN,EAAA,EAAD,CAAUC,GAAI/N,KAAK4I,MAAMD,mBACvBxI,EAAAC,EAAAC,cAAA,OAAK2N,GAAG,wBACNhO,KAAK4I,MAAM5B,sBAAwBhH,KAAK4I,MAAM3B,sBAC5C9G,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,KACE9N,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,QAAQ,OACRL,KAAMF,KAAK4I,MAAM5B,sBAAwBhH,KAAK4I,MAAM3B,qBACpDzG,QAAS,kBAAMoN,EAAKhH,SAAS,CAAEK,sBAAsB,KACrDxG,aAAW,GAJb,qBAKsBN,EAAAC,EAAAC,cAAA,cAASL,KAAK4I,MAAMsF,WAL1C,uBAMI/N,EAAAC,EAAAC,cAAA,OAAKW,UAAU,uCACXhB,KAAK4I,MAAM/B,oBACX1G,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQwM,QAASnO,KAAKyG,YACdlG,QAAQ,gBADhB,UAKDP,KAAK4I,MAAM/B,oBACV1G,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAASE,UAAU,SAASE,KAAK,SAASD,KAAK,MAC7C9B,EAAAC,EAAAC,cAAA,QAAMW,UAAU,WAAhB,mBAED,IAAIb,EAAAC,EAAAC,cAAA,oCAOlBL,KAAK4I,MAAM1B,wBACV/G,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,KACE9N,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,QAAQ,UACRC,QAAS,kBAAMoN,EAAKhH,SAAS,CAAEM,wBAAwB,KACvDzG,aAAW,GAFlB,OAGMN,EAAAC,EAAAC,cAAA,cAASL,KAAK4I,MAAMsF,WAH1B,6BAON/N,EAAAC,EAAAC,cAAC+N,EAAA,EAAD,CAAMC,iBAAiB,SAASL,GAAG,gBAAgBM,SAAUtO,KAAKwM,gBAC5DxL,UAAU,0BAEdb,EAAAC,EAAAC,cAACkO,EAAA,EAAD,CAAKC,SAAS,SAAS9N,MAAM,cAAcM,UAAU,aACnDb,EAAAC,EAAAC,cAAA,OAAK2N,GAAG,YAAYS,IAAI,YACtBtO,EAAAC,EAAAC,cAAA,QAAMW,UAAU,eAAcb,EAAAC,EAAAC,cAACqO,EAAA,EAAD,OAC9BvO,EAAAC,EAAAC,cAAA,6BAAoBF,EAAAC,EAAAC,cAAA,WAApB,mEAGFF,EAAAC,EAAAC,cAAA,OAAKW,UAAU,oBACbb,EAAAC,EAAAC,cAACY,EAAD,CAAYD,UAAU,0BACpB2N,MAAM,QACNpO,QAAQ,UACR0B,KAAK,KACLkM,QAASnO,KAAKsJ,oBACdnI,UAAWnB,KAAK4I,MAAMX,cACtB7G,KAAK,kBACLC,YAAY,qBAIlBlB,EAAAC,EAAAC,cAACkO,EAAA,EAAD,CAAKC,SAAS,YAAY9N,MAAM,0BAA2BM,UAAU,cACnEb,EAAAC,EAAAC,cAACuO,EAAA,EAAKC,MAAN,CAAYC,UAAU,QACpB3O,EAAAC,EAAAC,cAACuO,EAAA,EAAKG,MAAN,CAAY/N,UAAU,cAAtB,qBAAiEb,EAAAC,EAAAC,cAAA,WACjEF,EAAAC,EAAAC,cAACuO,EAAA,EAAKG,MAAN,CAAY/N,UAAU,2BACnBhB,KAAK4I,MAAM0D,SAAWtM,KAAK4I,MAAM0D,SAAW,UAE/CnM,EAAAC,EAAAC,cAACuO,EAAA,EAAKI,QAAN,CACEC,SAAUjP,KAAKgM,iBACfkD,KAAK,OACLC,OAAO,UACPnO,UAAU,eAEZhB,KAAK4I,MAAMuD,MACXhM,EAAAC,EAAAC,cAACwN,EAAA,SAAD,KACE1N,EAAAC,EAAAC,cAAA,OAAK2N,GAAG,eACN7N,EAAAC,EAAAC,cAAC+O,EAAAhP,EAAD,CACEqO,IAAI,UACJY,IAAKrP,KAAK4I,MAAMuD,KAChB1H,MAAO,CAACuE,OAAQ,IAAKD,MAAO,QAC5BuG,QAAQ,EACRC,YAAa,EACbC,SAAU,KAGdrP,EAAAC,EAAAC,cAAA,OAAKW,UAAU,oBACbb,EAAAC,EAAAC,cAACY,EAAD,CAAYD,UAAU,0BACpBT,QAAQ,UACR0B,KAAK,KACLT,UAAWxB,KAAK4I,MAAM0D,SACtB6B,QAASnO,KAAKmH,mBACdhG,UAAWnB,KAAK4I,MAAMX,cACtB7G,KAAK,kBACLC,YAAY,yBASxBrB,KAAK4I,MAAMF,YAAYwC,OAAS,GAChC/K,EAAAC,EAAAC,cAAA,OAAKW,UAAU,0BACbb,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAQoO,IAAI,SAAS1F,MAAOhG,EAAaiG,OAAQjG,IACjD5C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACoP,EAAA,EAAD,KACCzP,KAAK4I,MAAMF,YAAYgH,IAAI,SAACC,GAEzB,OADFvJ,QAAQC,IAAIsJ,GACiB,gBAAvBA,EAAS3O,UAETb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BAAmBF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAAS3O,WAAmBb,EAAAC,EAAAC,cAAA,WAAjE,OAA8EF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAASjE,YAAlB,oBAG3D,iBAAvBiE,EAAS3O,UAEhBb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BAAmBF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAAS3O,WAAmBb,EAAAC,EAAAC,cAAA,WAAjE,OAA8EF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAASjE,YAAlB,oBAG5D,iBAAvBiE,EAAS3O,UAEfb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BAAmBF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAAS3O,WAAmBb,EAAAC,EAAAC,cAAA,WAAjE,OAA8EF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAASjE,YAAlB,oBAG5D,kBAAvBiE,EAAS3O,UAEfb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BAAiBF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAAS3O,WAAmBb,EAAAC,EAAAC,cAAA,WAA/D,OAA4EF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAASjE,YAAlB,oBAGzD,kBAAvBiE,EAAS3O,UAEhBb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BAAiBF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAAS3O,WAAmBb,EAAAC,EAAAC,cAAA,WAA/D,OAA4EF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAASjE,YAAlB,oBAGzD,iBAAvBiE,EAAS3O,UAEhBb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BAAiBF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAAS3O,WAAmBb,EAAAC,EAAAC,cAAA,WAA/D,OAA4EF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,cAASsP,EAASjE,YAAlB,yBAHpF,eA1Za5K,aCtBvB8O,SAAA,kBACbzP,EAAAC,EAAAC,cAAA,OAAKW,UAAU,YACbb,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,KAAGwP,KAAK,KAAR,cCJWC,EAAA,SAAA5O,GAAA,IAAG6O,EAAH7O,EAAG6O,WAAH,OACb5P,EAAAC,EAAAC,cAAC2P,EAAA,EAAD,KACE7P,EAAAC,EAAAC,cAAC2P,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjN,EAAUjD,MAAO8P,IAClD5P,EAAAC,EAAAC,cAAC2P,EAAA,EAAD,CAAOC,KAAK,SAASC,OAAK,EAACC,UAAWC,EAAOnQ,MAAO8P,IACpD5P,EAAAC,EAAAC,cAAC2P,EAAA,EAAD,CAAOG,UAAWE,MCDhBC,2DAEJ,SAAAA,EAAYrQ,GAAO,IAAAkD,EAAA1B,OAAA2B,EAAA,EAAA3B,CAAAzB,KAAAsQ,IACjBnN,EAAAE,EAAAC,KAAAtD,KAAMC,IAaRsQ,mBAAqB,SAAAxE,GACnB5I,EAAKyD,SAAS,CAAE4J,iBAAiB,KAfhB,OAQjBrN,EAAKyF,MAAQ,CACX4H,iBAAiB,EACjBC,UARa,kQAFEtN,uDAmBjB,OACIhD,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,KACE9N,EAAAC,EAAAC,cAACqQ,EAAA,EAAD,CAAQC,kBAAgB,EAAC3P,UAAU,cAAcT,QAAQ,OAAOqQ,OAAO,MACrEzQ,EAAAC,EAAAC,cAACqQ,EAAA,EAAOG,MAAR,CAAchB,KAAK,KAAnB,mBACA1P,EAAAC,EAAAC,cAACyQ,EAAA,EAAD,CAAMC,GAAG,SAAS/P,UAAU,gBAA5B,gBAIAhB,KAAKC,MAAM+Q,iBAAmBhR,KAAK4I,MAAM4H,iBACzCrQ,EAAAC,EAAAC,cAAA,OAAKoE,MAAO,CAACwM,WAAY,SACvB9Q,EAAAC,EAAAC,cAAC6Q,EAAD,CACExQ,MAAM,GACNH,QAAQ,OACRM,QAASb,KAAK4I,MAAM6H,UACpBvQ,KAAMF,KAAKC,MAAM+Q,iBAAmBhR,KAAK4I,MAAM4H,gBAC/ChQ,QAASR,KAAKuQ,uBAItBpQ,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,KACE9N,EAAAC,EAAAC,cAACyP,EAAD,eA1CMhP,cAoDHqQ,cAAWb,GCjDpBc,EAAcC,QACW,cAA7BzE,OAAO0E,SAASC,UAEe,UAA7B3E,OAAO0E,SAASC,UAEhB3E,OAAO0E,SAASC,SAASC,MACvB,2DAIC,SAASC,EAASlM,GACvB,GAA6C,kBAAmBmM,UAAW,CAGzE,GADkB,IAAItF,IAAIuF,GAAwB/E,OAAO0E,SAASzB,MACpD+B,SAAWhF,OAAO0E,SAASM,OAIvC,OAGFhF,OAAOiF,iBAAiB,OAAQ,WAC9B,IAAMC,EAAK,GAAAjQ,OAAM8P,GAAN,sBAEPP,IAqEV,SAAiCU,EAAOvM,GAEtCD,MAAMwM,GACHrM,KAAK,SAAAG,GAEJ,IAAMmM,EAAcnM,EAASoM,QAAQ/E,IAAI,gBAEnB,MAApBrH,EAASqM,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CR,UAAUS,cAAcC,MAAM3M,KAAK,SAAA4M,GACjCA,EAAaC,aAAa7M,KAAK,WAC7BmH,OAAO0E,SAASiB,aAKpBC,EAAgBV,EAAOvM,KAG1BW,MAAM,WACLE,QAAQC,IACN,mEA1FAoM,CAAwBX,EAAOvM,GAI/BmM,UAAUS,cAAcC,MAAM3M,KAAK,WACjCW,QAAQC,IACN,gHAMJmM,EAAgBV,EAAOvM,MAM/B,SAASiN,EAAgBV,EAAOvM,GAC9BmM,UAAUS,cACPV,SAASK,GACTrM,KAAK,SAAA4M,GA4BJ,SAASK,EAAiBC,GAIxBvM,QAAQC,IACN,iHAGEd,GAAUA,EAAOqN,UACnBrN,EAAOqN,SAASP,EAAcM,GAnC9BN,EAAaQ,SAAWR,EAAaS,QACvCJ,EAAiBL,EAAaQ,SAEhCR,EAAaU,cAAgB,WAC3B,IAAMC,EAAmBX,EAAaY,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpK,QACf8I,UAAUS,cAAcgB,WAC1BT,EAAiBM,IAKjB5M,QAAQC,IAAI,sCAGRd,GAAUA,EAAO6N,WACnB7N,EAAO6N,UAAUf,UAmB5BnM,MAAM,SAAAmN,GACLjN,QAAQiN,MAAM,4CAA6CA,SC5F3DC,8MACJ1K,MAAQ,CACN2K,eAAe,EACfvC,iBAAiB,KAsBnBwC,aAAe,SAACnB,GACd,IAAMoB,EAAuBpB,EAAaQ,QAEtCY,GACFA,EAAqBC,YAAY,CAAExE,KAAM,iBAE3C/L,EAAKyD,SAAS,CAAEoK,iBAAiB,uEAjBjCmB,EAPe,CACbS,SAAU5S,KAAKwT,gDAUjB,OACErT,EAAAC,EAAAC,cAACyQ,EAAA,EAAD,KACE3Q,EAAAC,EAAAC,cAACsT,EAAD,CAAK3C,gBAAiBhR,KAAK4I,MAAMoI,0BApBrBlQ,aAmCpB8S,IAASC,OAAO1T,EAAAC,EAAAC,cAACyT,EAAD,MAAWC,SAASC,eAAe","file":"static/js/main.01f042c6.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\n\n/**\n * Class to handle the rendering of a dismissiable alert to use for things like errors.\n * @extends React.Component\n */\nclass AlertDismissable extends Component {\n\n  render() {\n    if (this.props.show) {\n      return (\n        <Alert variant={this.props.variant || 'danger'} onClose={this.props.onClose} dismissible>\n          { this.props.title && <h5><strong>{this.props.title}</strong></h5> }\n          <div dangerouslySetInnerHTML={{ __html: this.props.message }} />\n        </Alert>\n      );\n    }\n    return null;\n  }\n}\n\nexport default AlertDismissable;\n","import React, { Component } from 'react';\nimport './About.css';\n\n/**\n * Class to handle the rendering of the Home page.\n * @extends React.Component\n */\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"About container\">\n        <h1>About</h1>\n        <br></br>\n        <p>\n          FREZZ is a website application that can be used to help and facilitate supermarkets or fruit farmers in Indonesia in choosing fruit\n           with the best quality, for now FREZZ can only be used to classify fruits such as bananas, apples and oranges. This application can\n           determine which fruit is fresh or rotten, this is done as a <i>quality control</i> so that the fruit distributed has the best quality.\n          <br></br>\n          <br></br>\n          FREZZ was created and developed by the following people:\n          <ul>\n            <li><strong>Alyza Rahima Pramudya</strong></li>\n            <li><strong>Dierta Pasific</strong></li>\n            <li><strong>Jacqueline Abyasa</strong></li>\n            <li><strong>Shafa Amira Qonitatin</strong></li>\n          </ul>\n        </p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\n\n/**\n * This produces a button that will have a loading animation while the isLoading property is true.\n */\nexport default ({\n  isLoading,\n  text,\n  loadingText,\n  className = '',\n  disabled = false,\n  ...props\n}) =>\n  <Button\n    className={`LoadButton ${className}`}\n    disabled={disabled || isLoading}\n    {...props}\n  >\n    {isLoading && <Spinner\n      as=\"span\"\n      animation=\"border\"\n      size=\"sm\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />}{' '}\n    {isLoading ? loadingText : text}\n  </Button>;\n","/* eslint-disable */\n// Theses classes should correspond to the softmax output of your model.\n\nexport const MODEL_CLASSES = {\n  0: 'Fresh Apple',\n  1: 'Fresh Banana',\n  2: 'Fresh Orange',\n  3: 'Rotten Apple',\n  4: 'Rotten Banana',\n  5: 'Rotten Orange'\n};\n","export default {\n  API_ENDPOINT: 'http://localhost:5000/api',\n  // API_ENDPOINT: 'https://[YOUR-ROUTE].mybluemix.net/api'\n};\n","import React, { Component, Fragment } from 'react';\nimport {\n  Alert, Button, Collapse, Container, Form, Spinner, ListGroup, Tabs, Tab\n} from 'react-bootstrap';\nimport { FaCamera} from 'react-icons/fa';\nimport { openDB } from 'idb';\nimport Cropper  from 'react-cropper';\nimport * as tf from '@tensorflow/tfjs';\nimport LoadButton from '../components/LoadButton';\nimport { MODEL_CLASSES } from '../model/classes';\nimport config from '../config'; \nimport './Classify.css';\nimport 'cropperjs/dist/cropper.css';\n\n\nconst MODEL_PATH = '/model/model3/transfer_learning/model.json';\nconst IMAGE_SIZE = 150;\nconst CANVAS_SIZE = 224;\nconst TOPK_PREDICTIONS = 3;\n\nconst INDEXEDDB_DB = 'tensorflowjs';\nconst INDEXEDDB_STORE = 'model_info_store';\nconst INDEXEDDB_KEY = 'web-model';\n\n/**\n * Class to handle the rendering of the Classify page.\n * @extends React.Component\n */\nexport default class Classify extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.webcam = null;\n    this.model = null;\n    this.modelLastUpdated = null;\n\n    this.state = {\n      modelLoaded: false,\n      filename: '',\n      isModelLoading: false,\n      isClassifying: false,\n      predictions: [],\n      photoSettingsOpen: true,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: false,\n      isDownloadingModel: false\n    };\n  }\n\n  async componentDidMount() {\n    if (('indexedDB' in window)) {\n      try {\n        this.model = await tf.loadLayersModel('indexeddb://' + INDEXEDDB_KEY);\n\n        try {\n          const db = await openDB(INDEXEDDB_DB, 1, );\n          const item = await db.transaction(INDEXEDDB_STORE)\n                               .objectStore(INDEXEDDB_STORE)\n                               .get(INDEXEDDB_KEY);\n          const dateSaved = new Date(item.modelArtifactsInfo.dateSaved);\n          await this.getModelInfo();\n          console.log(this.modelLastUpdated);\n          if (!this.modelLastUpdated  || dateSaved >= new Date(this.modelLastUpdated).getTime()) {\n            console.log('Using saved model');\n          }\n          else {\n            this.setState({\n              modelUpdateAvailable: true,\n              showModelUpdateAlert: true,\n            });\n          }\n\n        }\n        catch (error) {\n          console.warn(error);\n          console.warn('Could not retrieve when model was saved.');\n        }\n\n      }\n      \n      catch (error) {\n        console.log('Not found in IndexedDB. Loading and saving...');\n        console.log(error);\n        this.model = await tf.loadLayersModel(MODEL_PATH);\n        await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n      }\n    }\n    \n    else {\n      console.warn('IndexedDB not supported.');\n      this.model = await tf.loadLayersModel(MODEL_PATH);\n    }\n\n    this.setState({ modelLoaded: true });\n    this.initWebcam();\n\n    let prediction = tf.tidy(() => this.model.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3])));\n    prediction.dispose();\n  }\n\n  async componentWillUnmount() {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n\n    try {\n      this.model.dispose();\n    }\n    catch (e) {\n    }\n  }\n\n  initWebcam = async () => {\n    try {\n      this.webcam = await tf.data.webcam(\n        this.refs.webcam,\n        {resizeWidth: CANVAS_SIZE, resizeHeight: CANVAS_SIZE, facingMode: 'environment'}\n      );\n    }\n    catch (e) {\n      this.refs.noWebcam.style.display = 'block';\n    }\n  }\n\n  startWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.start();\n    }\n  }\n\n  stopWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n  }\n\n  getModelInfo = async () => {\n    await fetch(`${config.API_ENDPOINT}/model_info`, {\n      method: 'GET',\n    })\n    .then(async (response) => {\n      await response.json().then((data) => {\n        this.modelLastUpdated = data.last_updated;\n      })\n      .catch((err) => {\n        console.log('Unable to get parse model info.');\n      });\n    })\n    .catch((err) => {\n      console.log('Unable to get model info');\n    });\n  }\n\n  updateModel = async () => {\n    console.log('Updating the model: ' + INDEXEDDB_KEY);\n    this.setState({ isDownloadingModel: true });\n    this.model = await tf.loadLayersModel(MODEL_PATH);\n    await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n    this.setState({\n      isDownloadingModel: false,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: true\n    });\n  }\n\n  classifyLocalImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const croppedCanvas = this.refs.cropper.getCroppedCanvas();\n    const image = tf.tidy( () => tf.browser.fromPixels(croppedCanvas).toFloat());\n\n    const imageData = await this.processImage(image);\n    const resizedImage = tf.image.resizeBilinear(imageData, [IMAGE_SIZE, IMAGE_SIZE]);\n\n    const logits = this.model.predict(resizedImage);\n    const probabilities = await logits.data();\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    const context = this.refs.canvas.getContext('2d');\n    const ratioX = CANVAS_SIZE / croppedCanvas.width;\n    const ratioY = CANVAS_SIZE / croppedCanvas.height;\n    const ratio = Math.min(ratioX, ratioY);\n    context.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n    context.drawImage(croppedCanvas, 0, 0,\n                      croppedCanvas.width * ratio, croppedCanvas.height * ratio);\n\n    image.dispose();\n    imageData.dispose();\n    resizedImage.dispose();\n    logits.dispose();\n  }\n\n  classifyWebcamImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const imageCapture = await this.webcam.capture();\n\n    const resized = tf.image.resizeBilinear(imageCapture, [IMAGE_SIZE, IMAGE_SIZE]);\n    const imageData = await this.processImage(resized);\n    const logits = this.model.predict(imageData);\n    const probabilities = await logits.data();\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    const tensorData = tf.tidy(() => imageCapture.toFloat().div(255));\n    await tf.browser.toPixels(tensorData, this.refs.canvas);\n\n    resized.dispose();\n    imageCapture.dispose();\n    imageData.dispose();\n    logits.dispose();\n    tensorData.dispose();\n  }\n\n  processImage = async (image) => {\n    return tf.tidy(() => image.expandDims(0).toFloat().div(127).sub(1));\n  }\n\n\n  getTopKClasses = async (values, topK) => {\n    const valuesAndIndices = [];\n    for (let i = 0; i < values.length; i++) {\n      valuesAndIndices.push({value: values[i], index: i});\n    }\n    valuesAndIndices.sort((a, b) => {\n      return b.value - a.value;\n    });\n    const topkValues = new Float32Array(topK);\n    const topkIndices = new Int32Array(topK);\n    for (let i = 0; i < topK; i++) {\n      topkValues[i] = valuesAndIndices[i].value;\n      topkIndices[i] = valuesAndIndices[i].index;\n    }\n\n    const topClassesAndProbs = [];\n    for (let i = 0; i < 1; i++) {\n      topClassesAndProbs.push({\n        className: MODEL_CLASSES[topkIndices[i]],\n        probability: (topkValues[i] * 100).toFixed(2)\n      });\n    }\n    return topClassesAndProbs;\n  }\n\n  handlePanelClick = event => {\n    this.setState({ photoSettingsOpen: !this.state.photoSettingsOpen });\n  }\n\n  handleFileChange = event => {\n    if (event.target.files && event.target.files.length > 0) {\n      this.setState({\n        file: URL.createObjectURL(event.target.files[0]),\n        filename: event.target.files[0].name\n      });\n    }\n  }\n\n  handleTabSelect = activeKey => {\n    switch(activeKey) {\n      case 'camera':\n        this.startWebcam();\n        break;\n      case 'localfile':\n        this.setState({filename: null, file: null});\n        this.stopWebcam();\n        break;\n      default:\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Classify container\">\n\n      { !this.state.modelLoaded &&\n        <Fragment>\n          <Spinner>\n            <span className=\"spinner-grow text-success\"></span>\n          </Spinner>\n          {' '}<span className=\"loading-model-text\">Loading Model</span>\n          <h6>Please wait patiently, for the first time it will take a little bit longer</h6>\n        </Fragment>\n      }\n\n      { this.state.modelLoaded &&\n        <Fragment>\n          <Collapse in={this.state.photoSettingsOpen}>\n            <div id=\"photo-selection-pane\">\n            { this.state.modelUpdateAvailable && this.state.showModelUpdateAlert &&\n                <Container>\n                  <Alert\n                    variant=\"info\"\n                    show={this.state.modelUpdateAvailable && this.state.showModelUpdateAlert}\n                    onClose={() => this.setState({ showModelUpdateAlert: false})}\n                    dismissible>\n                      An update for the <strong>{this.state.modelType}</strong> model is available.\n                      <div className=\"d-flex justify-content-center pt-1\">\n                        {!this.state.isDownloadingModel &&\n                          <Button onClick={this.updateModel}\n                                  variant=\"outline-info\">\n                            Update\n                          </Button>\n                        }\n                        {this.state.isDownloadingModel &&\n                          <div>\n                            <Spinner animation=\"border\" role=\"status\" size=\"sm\">\n                              <span className=\"sr-only\">Downloading...</span>\n                            </Spinner>\n                            {' '}<strong>Downloading...</strong>\n                          </div>\n                        }\n                      </div>\n                  </Alert>\n                </Container>\n              }\n              {this.state.showModelUpdateSuccess &&\n                <Container>\n                  <Alert variant=\"success\"\n                         onClose={() => this.setState({ showModelUpdateSuccess: false})}\n                         dismissible>\n                    The <strong>{this.state.modelType}</strong> model has been updated!\n                  </Alert>\n                </Container>\n              }\n            <Tabs defaultActiveKey=\"camera\" id=\"input-options\" onSelect={this.handleTabSelect}\n                  className=\"justify-content-center\">\n                  \n              <Tab eventKey=\"camera\" title=\"Take Photos\" className=\"takePhoto\">\n                <div id=\"no-webcam\" ref=\"noWebcam\">\n                  <span className=\"camera-icon\"><FaCamera /></span>\n                  <p>No camera found. <br />\n                  Please use a device with a camera, or upload an image instead.</p>\n                </div>\n                <div className=\"button-container\">\n                  <LoadButton className='btn btn-outline-success'\n                    color=\"black\"\n                    variant=\"Success\"\n                    size=\"lg\"\n                    onClick={this.classifyWebcamImage}\n                    isLoading={this.state.isClassifying}\n                    text=\"Let's Classify!\"\n                    loadingText=\"Classifying...\"\n                  />\n                </div>\n              </Tab>\n              <Tab eventKey=\"localfile\" title=\"Select Image From Local\"  className=\"localImage\">\n                <Form.Group controlId=\"file\">\n                  <Form.Label className='textUpload'>Upload your image</Form.Label><br />\n                  <Form.Label className=\"btn btn-outline-success\" >\n                    {this.state.filename ? this.state.filename : 'Browse'}\n                  </Form.Label>\n                  <Form.Control\n                    onChange={this.handleFileChange}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"imagefile\" />\n                </Form.Group>\n                { this.state.file &&\n                  <Fragment>\n                    <div id=\"local-image\">\n                      <Cropper\n                        ref=\"cropper\"\n                        src={this.state.file}\n                        style={{height: 400, width: '100%'}}\n                        guides={true}\n                        aspectRatio={1 / 1}\n                        viewMode={2}\n                      />\n                    </div>\n                    <div className=\"button-container\">\n                      <LoadButton className='btn btn-outline-success'\n                        variant=\"Success\"\n                        size=\"lg\"\n                        disabled={!this.state.filename}\n                        onClick={this.classifyLocalImage}\n                        isLoading={this.state.isClassifying}\n                        text=\"Let's Classify!\"\n                        loadingText=\"Classifying...\"\n                      />\n                    </div>\n                  </Fragment>\n                }\n              </Tab>\n            </Tabs>\n            </div>\n          </Collapse>\n          { this.state.predictions.length > 0 &&\n            <div className=\"classification-results\">\n              <h3>Predictions</h3>\n              <canvas ref=\"canvas\" width={CANVAS_SIZE} height={CANVAS_SIZE} />\n              <br />\n              <ListGroup>\n              {this.state.predictions.map((category) => {\n                console.log(category);\n                  if (category.className === 'Fresh Apple' ) {\n                    return (\n                      <div>\n                        <p>This most likely<br></br><strong>{category.className}</strong><br></br>with<br></br><strong>{category.probability}% probability!</strong></p>\n                      </div>\n                    );\n                  } else if (category.className === 'Fresh Orange') {\n                    return (\n                      <div>\n                        <p>This most likely<br></br><strong>{category.className}</strong><br></br>with<br></br><strong>{category.probability}% probability!</strong></p>\n                      </div>\n                    );\n                  }else if (category.className === 'Fresh Banana') {\n                    return (\n                      <div>\n                        <p>This most likely<br></br><strong>{category.className}</strong><br></br>with<br></br><strong>{category.probability}% probability!</strong></p>\n                      </div>\n                    );\n                  }else if (category.className === 'Rotten Banana'){\n                    return (\n                      <div>\n                        <p>Oh no! This is<br></br><strong>{category.className}</strong><br></br>with<br></br><strong>{category.probability}% probability!</strong></p>\n                      </div>\n                    );\n                  } else if (category.className === 'Rotten Orange'){\n                    return (\n                      <div>\n                        <p>Oh no! This is<br></br><strong>{category.className}</strong><br></br>with<br></br><strong>{category.probability}% probability!</strong></p>\n                      </div>\n                    );\n                  } else if (category.className === 'Rotten Apple'){\n                    return (\n                      <div>\n                        <p>Oh no! This is<br></br><strong>{category.className}</strong><br></br>with<br></br><strong>{category.probability}% probability!</strong></p>\n                      </div>\n                    );\n                  }\n                  \n              })}\n              </ListGroup>\n            </div>\n          }\n          </Fragment>\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './NotFound.css';\n\n/**\n * This is rendered when a route is not found (404).\n */\nexport default () =>\n  <div className=\"NotFound\">\n    <h1>404</h1>\n    <h3>The page you were looking for is not here.</h3>\n    <a href=\"/\">Go Home</a>\n  </div>;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport About from './pages/About';\nimport Classify from './pages/Classify';\nimport NotFound from './pages/NotFound';\n\nexport default ({ childProps }) =>\n  <Switch>\n    <Route path=\"/\" exact component={Classify} props={childProps} />\n    <Route path=\"/about\" exact component={About} props={childProps} />\n    <Route component={NotFound} />\n  </Switch>;\n","import { PropTypes } from 'prop-types';\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Container, Navbar } from 'react-bootstrap';\nimport AlertDismissable from './components/AlertDismissable';\nimport Routes from './Routes';\nimport './App.css';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    const reloadMsg = `\n      New content is available.<br />\n      Please <a href='javascript:location.reload();'>reload</a>.<br />\n      <small>If reloading doesn't work, close all tabs/windows of this web application,\n      and then reopen the application.</small>\n    `;\n    this.state = {\n      showUpdateAlert: true,\n      reloadMsg: reloadMsg\n    };\n  }\n\n  dismissUpdateAlert = event => {\n    this.setState({ showUpdateAlert: false });\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Container>\n            <Navbar collapseOnSelect className=\"app-nav-bar\" variant=\"dark\" expand=\"lg\">\n              <Navbar.Brand href=\"/\">Fresh or Rotten</Navbar.Brand>\n              <Link to=\"/about\" className='navbar-about'>About FREZZ</Link>\n              \n\n            </Navbar>\n            { this.props.updateAvailable && this.state.showUpdateAlert &&\n              <div style={{paddingTop: '10px'}}>\n                <AlertDismissable\n                  title=\"\"\n                  variant=\"info\"\n                  message={this.state.reloadMsg}\n                  show={this.props.updateAvailable && this.state.showUpdateAlert}\n                  onClose={this.dismissUpdateAlert} />\n              </div>\n            }\n          </Container>\n          <Container>\n            <Routes />\n          </Container>\n        </div>\n    );\n  }\n}\nApp.propTypes = {\n  updateAvailable: PropTypes.bool.isRequired,\n};\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // A new service worker has previously finished installing, and is now waiting.\n      if (registration.waiting && registration.active) {\n        newerSwAvailable(registration.waiting);\n      }\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              newerSwAvailable(installingWorker);\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n      function newerSwAvailable(sw){\n        // At this point, the updated precached content has been fetched,\n        // but the previous service worker will still serve the older\n        // content until all client tabs are closed.\n        console.log(\n          'New content is available and will be used when all ' +\n            'tabs for this page are closed. See http://bit.ly/CRA2-PWA.'\n        );\n        if (config && config.onUpdate) {\n          config.onUpdate(registration, sw);\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nclass Index extends Component {\n  state = {\n    contentCached: false,\n    updateAvailable: false,\n  };\n\n  componentDidMount() {\n    const config = {\n      onUpdate: this.handleUpdate,\n    };\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: https://bit.ly/CRA-PWA\n    serviceWorker.register(config);\n  }\n\n  render() {\n    return (\n      <Router>\n        <App updateAvailable={this.state.updateAvailable} />\n      </Router>\n    );\n  }\n\n  handleUpdate = (registration) => {\n    const waitingServiceWorker = registration.waiting;\n\n    if (waitingServiceWorker) {\n      waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\n    }\n    this.setState({ updateAvailable: true});\n  }\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n"],"sourceRoot":""}